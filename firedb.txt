steps:
0 create a project in firebase and choose android 
1 Enter your Android package name (e.g., com.example.myfirebaseapp).
2 Download the google-services.json file provided by Firebase.
  Place this file in the app directory of your Android Studio project.
3 update the gradle file and sync the project (if you don't sync then you will get error)
4 create realtime database in test mode and update the rules as below 
{
  "rules": {
    ".read": "auth == null",
    ".write": "auth == null",
    "items": {
      ".read": true
    }
  }
}

5 update manifest as below 
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
and also 
<activity android:name=".DisplayListActivity" > </activity>

6 now rest of the java and xml files 



project level gradle file 

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id("com.android.application") version "8.2.0" apply false
}

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath("com.android.tools.build:gradle:7.0.4")
        classpath("com.google.gms:google-services:4.3.14")
    }
}


app level gradle file 

plugins {
    id("com.android.application")
    id("com.google.gms.google-services")
}

android {
    namespace = "com.example.firedb"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.example.firedb"
        minSdk = 26
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

dependencies {

    //implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.12.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
    implementation("androidx.appcompat:appcompat:1.3.1")
    implementation("com.google.firebase:firebase-database:20.1.0")
    implementation("com.google.firebase:firebase-core:21.1.1")

}




MainActivity.java
package com.example.firedb;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;

import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {

    private FirebaseDatabase database;
    private DatabaseReference contactsRef;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize Firebase Realtime Database
        database = FirebaseDatabase.getInstance();
        contactsRef = database.getReference("contacts");

        // Initialize UI elements and other setup...

        // Example: Add button click listener to add a contact
        Button addButton = findViewById(R.id.add_button);
        addButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                EditText idEditText = findViewById(R.id.editTextId);
                EditText nameEditText = findViewById(R.id.editTextName);
                EditText phoneEditText = findViewById(R.id.editTextPhone);

                String id = idEditText.getText().toString();
                String name = nameEditText.getText().toString();
                String phone = phoneEditText.getText().toString();

                // Create a new Contact object
                Contact contact = new Contact(id, name, phone);

                // Push the contact object to the database
                contactsRef.push().setValue(contact);
            }
        });

        Button deleteButton = findViewById(R.id.delete_button);
        deleteButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Retrieve the ID from the EditText
                EditText deleteIdEditText = findViewById(R.id.editTextDeleteId);
                String deleteId = deleteIdEditText.getText().toString();

                // Construct the reference to the specific node in the database
                DatabaseReference deleteRef = contactsRef.child(deleteId);

                // Remove the node from the database
                deleteRef.removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                    @Override
                    public void onSuccess(Void aVoid) {
                        // Deletion successful, display success message
                        Toast.makeText(MainActivity.this, "Contact deleted successfully", Toast.LENGTH_SHORT).show();
                    }
                }).addOnFailureListener(new OnFailureListener() {
                    @Override
                    public void onFailure(@NonNull Exception e) {
                        // Failed to delete, display failure message
                        Toast.makeText(MainActivity.this, "Failed to delete contact. Contact ID does not exist.", Toast.LENGTH_SHORT).show();
                    }
                });
            }
        });

        // Inside onCreate() method after setting up the delete button
        Button updateButton = findViewById(R.id.update_button);
        updateButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Get the values from the EditText fields
                EditText updateIdEditText = findViewById(R.id.editTextUpdateId);
                EditText newIdEditText = findViewById(R.id.editTextNewId);
                EditText newNameEditText = findViewById(R.id.editTextNewName);
                EditText newPhoneEditText = findViewById(R.id.editTextNewPhone);

                String updateId = updateIdEditText.getText().toString();
                String newId = newIdEditText.getText().toString();
                String newName = newNameEditText.getText().toString();
                String newPhone = newPhoneEditText.getText().toString();

                // Check if any of the fields are empty
                if (TextUtils.isEmpty(updateId) || TextUtils.isEmpty(newId) || TextUtils.isEmpty(newName) || TextUtils.isEmpty(newPhone)) {
                    Toast.makeText(MainActivity.this, "All fields are required", Toast.LENGTH_SHORT).show();
                    return;
                }

                // Create a map to hold the updated values
                Map<String, Object> updateValues = new HashMap<>();
                updateValues.put("id", newId);
                updateValues.put("name", newName);
                updateValues.put("phone", newPhone);

                // Update the values in the database for the given ID
                contactsRef.child(updateId).updateChildren(updateValues)
                        .addOnSuccessListener(new OnSuccessListener<Void>() {
                            @Override
                            public void onSuccess(Void aVoid) {
                                Toast.makeText(MainActivity.this, "Contact updated successfully", Toast.LENGTH_SHORT).show();
                            }
                        })
                        .addOnFailureListener(new OnFailureListener() {
                            @Override
                            public void onFailure(@NonNull Exception e) {
                                Toast.makeText(MainActivity.this, "Failed to update contact: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                            }
                        });
            }
        });

        Button displayButton;
        displayButton = findViewById(R.id.display_button);

        // Set click listener for the display button
        displayButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Open DisplayListActivity
                startActivity(new Intent(MainActivity.this, DisplayListActivity.class));
            }
        });

    }



    private void writeToDatabase(String text) {
        // Get a reference to the "messages" node in the database
        DatabaseReference messagesRef = database.getReference("messages");

        // Push the text message to the database under a unique ID
        messagesRef.push().setValue(text);

        // Add a value event listener to read the message from the Realtime Database
        messagesRef.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                // Iterate through the dataSnapshot to get the messages
                for (DataSnapshot messageSnapshot : dataSnapshot.getChildren()) {
                    String message = messageSnapshot.getValue(String.class);
                    Log.d("TAG", "Message is: " + message);
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                Log.w("TAG", "Failed to read value.", error.toException());
            }
        });
    }

}


activity_main.xml 
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <EditText
        android:id="@+id/editTextId"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter ID here"
        android:layout_marginTop="16dp"/>

    <EditText
        android:id="@+id/editTextName"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter name here"
        android:layout_below="@id/editTextId"
        android:layout_marginTop="16dp"/>

    <EditText
        android:id="@+id/editTextPhone"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter phone number here"
        android:layout_below="@id/editTextName"
        android:layout_marginTop="16dp"/>

    <Button
        android:id="@+id/add_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/editTextPhone"
        android:layout_marginTop="16dp"
        android:text="Submit" />

    <!-- EditText for entering the ID to delete -->
    <EditText
        android:id="@+id/editTextDeleteId"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter ID to delete"
        android:layout_below="@id/add_button"
        android:layout_marginTop="16dp"/>

    <!-- Button for deleting -->
    <Button
        android:id="@+id/delete_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Delete"
        android:layout_below="@id/editTextDeleteId"
        android:layout_marginTop="16dp"/>

    <!-- EditText for entering the ID to update -->
    <EditText
        android:id="@+id/editTextUpdateId"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter ID to update"
        android:layout_below="@id/delete_button"
        android:layout_marginTop="16dp"/>
    <EditText
        android:id="@+id/editTextNewId"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter new ID "
        android:layout_below="@+id/editTextUpdateId"
        android:layout_marginTop="16dp"/>

    <!-- EditText for entering the new name -->
    <EditText
        android:id="@+id/editTextNewName"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter new name"
        android:layout_below="@id/editTextNewId"
        android:layout_marginTop="16dp"/>

    <!-- EditText for entering the new phone number -->
    <EditText
        android:id="@+id/editTextNewPhone"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter new phone number"
        android:layout_below="@id/editTextNewName"
        android:layout_marginTop="16dp"/>

    <!-- Button for updating -->
    <Button
        android:id="@+id/update_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Update"
        android:layout_below="@id/editTextNewPhone"
        android:layout_marginTop="1dp"/>

    <Button
        android:id="@+id/display_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@id/update_button"
        android:layout_marginTop="1dp"
        android:text="Display" />

</RelativeLayout>




DisplayActivity.java
package com.example.firedb;

import android.os.Bundle;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import java.util.ArrayList;
import java.util.List;

public class DisplayListActivity extends AppCompatActivity {

    private ListView listView;
    private List<String> itemList;
    private ArrayAdapter<String> adapter;
    private DatabaseReference databaseReference;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_display_list);

        // Initialize views
        listView = findViewById(R.id.listView);

        // Initialize Firebase
        FirebaseDatabase database = FirebaseDatabase.getInstance();
        databaseReference = database.getReference("contacts");

        // Initialize list to hold items
        itemList = new ArrayList<>();

        // Initialize adapter
        adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, itemList);
        listView.setAdapter(adapter);

        // Read data from Firebase
        readDataFromFirebase();
    }

    private void readDataFromFirebase() {
        databaseReference.addValueEventListener(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                itemList.clear();
                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {
                    String id = snapshot.child("id").getValue(String.class);
                    String name = snapshot.child("name").getValue(String.class);
                    String phone = snapshot.child("phone").getValue(String.class);
                    itemList.add("ID: " + id + ", Name: " + name + ", Phone: " + phone);
                }
                adapter.notifyDataSetChanged();
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                // Handle database error
            }
        });
    }
}



activity_display_list.xml
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <ListView
        android:id="@+id/listView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />
</androidx.constraintlayout.widget.ConstraintLayout>




Contact.java
package com.example.firedb;

// Contact.java

public class Contact {
    private String id;
    private String name;
    private String phone;

    public Contact() {
        // Default constructor required for Firebase
    }

    public Contact(String id, String name, String phone) {
        this.id = id;
        this.name = name;
        this.phone = phone;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }
}













total file 
mainactivity.java
activity_main.xml
DisplayListActivity.java
activity_display_list.xml
Contact.java